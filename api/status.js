const express = require('express');
const fetch = require('node-fetch');
const { ethers } = require('ethers');

const router = express.Router();

const JSON_BIN_STATUS_URL = process.env.JSON_BIN_STATUS_URL;
const JSON_BIN_API_KEY = process.env.JSON_BIN_API_KEY;
const RPC_URL = process.env.RPC_URL;
const CAMERA_CONTRACT_ADDRESS = process.env.CAMERA_CONTRACT_ADDRESS;

const ABI = [
  "function ownerOf(uint256 tokenId) view returns (address)",
  "function tokenURI(uint256 tokenId) view returns (string)"
];

if (!JSON_BIN_STATUS_URL || !/^https?:\/\//.test(JSON_BIN_STATUS_URL)) {
  throw new Error('Áí∞Â¢ÉÂ§âÊï∞ JSON_BIN_STATUS_URL „ÅåÊú™Ë®≠ÂÆö„ÄÅ„Åæ„Åü„ÅØÁµ∂ÂØæURL„Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì');
}
if (!JSON_BIN_API_KEY) {
  throw new Error('Áí∞Â¢ÉÂ§âÊï∞ JSON_BIN_API_KEY „ÅåÊú™Ë®≠ÂÆö„Åß„Åô');
}

const baseUrl = JSON_BIN_STATUS_URL.replace(/\/+$/, '');

// ===== GET =====
router.get('/', async (req, res) => {
  try {
    const getUrl = `${baseUrl}/latest`;
    console.log('üì° GET /api/status');
    console.log('  GETÂÖàURL:', getUrl);

    const response = await fetch(getUrl, {
      method: 'GET',
      headers: { 'X-Master-Key': JSON_BIN_API_KEY }
    });
    const text = await response.text();
    console.log('  JSONBin GET response:', response.status, text);

    if (!response.ok) throw new Error(`JSONBin GETÂ§±Êïó: ${response.status} ${text}`);
    let statusData = JSON.parse(text).record;

    const provider = new ethers.JsonRpcProvider(RPC_URL);
    const contract = new ethers.Contract(CAMERA_CONTRACT_ADDRESS, ABI, provider);

    let updated = false;

    if (Array.isArray(statusData.wallets)) {
      for (const wallet of statusData.wallets) {
        if (Array.isArray(wallet.nfts)) {
          for (const nft of wallet.nfts) {
            if (nft.tokenId) {
              console.log(`üîç NFTÊ§úÂá∫: tokenId=${nft.tokenId}`);

              // ÊúÄÊñ∞„Ç™„Éº„Éä„ÉºÂèñÂæó
              const owner = await contract.ownerOf(nft.tokenId);

              // „É°„Çø„Éá„Éº„ÇøÂèñÂæó
              let uri = await contract.tokenURI(nft.tokenId);
              if (uri.startsWith('ipfs://')) {
                uri = uri.replace('ipfs://', 'https://ipfs.io/ipfs/');
              }
              const metaRes = await fetch(uri);
              if (!metaRes.ok) throw new Error(`„É°„Çø„Éá„Éº„ÇøÂèñÂæóÂ§±Êïó: ${metaRes.status}`);
              const metadata = await metaRes.json();

              const totalShots = metadata.attributes?.find(
                attr => attr.trait_type === 'Total Shots'
              )?.value ?? 0;

              // Êõ¥Êñ∞Âà§ÂÆö„Å®ÂèçÊò†
              if (wallet['wallet address'] !== owner) {
                wallet['wallet address'] = owner;
                updated = true;
              }
              if (nft.lastTotalShots !== totalShots) {
                nft.lastTotalShots = totalShots;
                updated = true;
              }

              console.log(`üì∏ Êõ¥Êñ∞ÂÄôË£ú: wallet=${wallet['wallet name']}, owner=${owner}, totalShots=${totalShots}`);
            }
          }
        }
      }
    }

    if (updated) {
      console.log('üíæ JSONBin„Å´Êõ¥Êñ∞„ÇíÂèçÊò†„Åó„Åæ„Åô');
      const putRes = await fetch(baseUrl, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'X-Master-Key': JSON_BIN_API_KEY
        },
        body: JSON.stringify(statusData)
      });
      const putText = await putRes.text();
      console.log('  JSONBin PUT response:', putRes.status, putText);
      if (!putRes.ok) throw new Error(`JSONBin PUTÂ§±Êïó: ${putRes.status} ${putText}`);
    } else {
      console.log('‚ÑπÔ∏è Êõ¥Êñ∞„ÅØ‰∏çË¶Å„Åß„Åó„Åü');
    }

    res.json(statusData);

  } catch (err) {
    console.error('‚ùå /api/status GET error:', err);
    res.status(500).json({ error: err.message });
  }
});

// ===== POSTÔºàÁèæÁä∂Á∂≠ÊåÅÔºâ =====
router.post('/', async (req, res) => {
  try {
    if (!req.body || Object.keys(req.body).length === 0) {
      return res.status(400).json({ error: 'Êõ¥Êñ∞„Éá„Éº„Çø„ÅåÁ©∫„Åß„Åô' });
    }

    console.log('üì° POST /api/status');
    console.log('  Request body:', JSON.stringify(req.body));

    const response = await fetch(baseUrl, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        'X-Master-Key': JSON_BIN_API_KEY
      },
      body: JSON.stringify(req.body)
    });

    const text = await response.text();
    console.log('  JSONBin PUT response:', response.status, text);

    if (!response.ok) throw new Error(`JSONBin PUTÂ§±Êïó: ${response.status} ${text}`);

    const data = JSON.parse(text);
    res.json(data.record);
  } catch (err) {
    console.error('‚ùå /api/status POST error:', err);
    res.status(500).json({ error: err.message });
  }
});

module.exports = router;
